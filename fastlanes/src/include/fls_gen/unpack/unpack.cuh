// generated!
#pragma once

#include <cuda.h>
#include <cuda_runtime.h>

namespace generated { namespace unpack::cuda { namespace normal {
inline __device__ void unpack_0bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	out[(i * 1) + (0 * 32) + 0]   = base_0;
	out[(i * 1) + (0 * 32) + 32]  = base_0;
	out[(i * 1) + (0 * 32) + 64]  = base_0;
	out[(i * 1) + (0 * 32) + 96]  = base_0;
	out[(i * 1) + (0 * 32) + 128] = base_0;
	out[(i * 1) + (0 * 32) + 160] = base_0;
	out[(i * 1) + (0 * 32) + 192] = base_0;
	out[(i * 1) + (0 * 32) + 224] = base_0;
	out[(i * 1) + (0 * 32) + 256] = base_0;
	out[(i * 1) + (0 * 32) + 288] = base_0;
	out[(i * 1) + (0 * 32) + 320] = base_0;
	out[(i * 1) + (0 * 32) + 352] = base_0;
	out[(i * 1) + (0 * 32) + 384] = base_0;
	out[(i * 1) + (0 * 32) + 416] = base_0;
	out[(i * 1) + (0 * 32) + 448] = base_0;
	out[(i * 1) + (0 * 32) + 480] = base_0;
	out[(i * 1) + (0 * 32) + 512] = base_0;
	out[(i * 1) + (0 * 32) + 544] = base_0;
	out[(i * 1) + (0 * 32) + 576] = base_0;
	out[(i * 1) + (0 * 32) + 608] = base_0;
	out[(i * 1) + (0 * 32) + 640] = base_0;
	out[(i * 1) + (0 * 32) + 672] = base_0;
	out[(i * 1) + (0 * 32) + 704] = base_0;
	out[(i * 1) + (0 * 32) + 736] = base_0;
	out[(i * 1) + (0 * 32) + 768] = base_0;
	out[(i * 1) + (0 * 32) + 800] = base_0;
	out[(i * 1) + (0 * 32) + 832] = base_0;
	out[(i * 1) + (0 * 32) + 864] = base_0;
	out[(i * 1) + (0 * 32) + 896] = base_0;
	out[(i * 1) + (0 * 32) + 928] = base_0;
	out[(i * 1) + (0 * 32) + 960] = base_0;
	out[(i * 1) + (0 * 32) + 992] = base_0;
}
inline __device__ void unpack_1bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                    = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                         = (register_0) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 0]   = tmp_0;
	tmp_0                         = (register_0 >> 1) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 32]  = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 64]  = tmp_0;
	tmp_0                         = (register_0 >> 3) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 96]  = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 5) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 7) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 9) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 11) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 13) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 15) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 17) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 19) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 21) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 23) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 25) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 27) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 29) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 31) & ((1ULL << 1) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_2bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                    = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                         = (register_0) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 0]   = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 32]  = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 64]  = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 96]  = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0                         = (register_0) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_3bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                    = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                         = (register_0) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 0]   = tmp_0;
	tmp_0                         = (register_0 >> 3) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 32]  = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 64]  = tmp_0;
	tmp_0                         = (register_0 >> 9) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 96]  = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 15) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 21) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 27) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 1) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 1) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 7) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 13) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 19) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 25) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 31) & ((1ULL << 1) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 1;
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 5) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 11) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 17) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 23) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 29) & ((1ULL << 3) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_4bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                    = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                         = (register_0) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 0]   = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 32]  = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 64]  = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 96]  = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0                         = (register_0) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0                         = (register_0) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0                         = (register_0) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_5bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                    = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                         = (register_0) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 0]   = tmp_0;
	tmp_0                         = (register_0 >> 5) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 32]  = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 64]  = tmp_0;
	tmp_0                         = (register_0 >> 15) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 96]  = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 25) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 3) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 3) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 13) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 23) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 1) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 1) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 11) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 21) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 31) & ((1ULL << 1) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 1;
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 9) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 19) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 29) & ((1ULL << 3) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 3;
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 7) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 17) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 27) & ((1ULL << 5) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_6bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                    = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                         = (register_0) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 0]   = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 32]  = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 64]  = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 96]  = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0                         = (register_0) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_7bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                   = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                        = (register_0) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 0]  = tmp_0;
	tmp_0                        = (register_0 >> 7) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 14) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 64] = tmp_0;
	tmp_0                        = (register_0 >> 21) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 96] = tmp_0;
	tmp_0                        = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 3) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 3) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 17) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 31) & ((1ULL << 1) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 1;
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 13) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 27) & ((1ULL << 5) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 5;
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 9) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 23) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 5) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 5) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 19) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0 |= ((register_0) & ((1ULL << 1) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 1) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 15) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 29) & ((1ULL << 3) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 3;
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 11) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 25) & ((1ULL << 7) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_8bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                    = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                         = (register_0) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 0]   = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 32]  = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 64]  = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 96]  = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0                         = (register_0) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0                         = (register_0) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0                         = (register_0) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0                         = (register_0) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0                         = (register_0) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0                         = (register_0) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0                         = (register_0) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_9bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                   = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                        = (register_0) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 0]  = tmp_0;
	tmp_0                        = (register_0 >> 9) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 18) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 64] = tmp_0;
	tmp_0                        = (register_0 >> 27) & ((1ULL << 5) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 5;
	out[(i * 1) + (0 * 32) + 96]  = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 13) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 31) & ((1ULL << 1) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 1;
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 17) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0 |= ((register_0) & ((1ULL << 3) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 3) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 21) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 7) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 7) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 25) & ((1ULL << 7) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 7;
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 11) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 29) & ((1ULL << 3) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 3;
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 15) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0 |= ((register_0) & ((1ULL << 1) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 1) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 19) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0 |= ((register_0) & ((1ULL << 5) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 5) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 23) & ((1ULL << 9) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_10bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                   = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                        = (register_0) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 0]  = tmp_0;
	tmp_0                        = (register_0 >> 10) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 20) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 64] = tmp_0;
	tmp_0                        = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 96]  = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0                         = (register_0) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 10) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_11bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                   = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                        = (register_0) & ((1ULL << 11) - 1);
	out[(i * 1) + (0 * 32) + 0]  = tmp_0;
	tmp_0                        = (register_0 >> 11) & ((1ULL << 11) - 1);
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 22) & ((1ULL << 10) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 1) - 1)) << 10;
	out[(i * 1) + (0 * 32) + 64]  = tmp_0;
	tmp_0                         = (register_0 >> 1) & ((1ULL << 11) - 1);
	out[(i * 1) + (0 * 32) + 96]  = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 11) - 1);
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 23) & ((1ULL << 9) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 9;
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 11) - 1);
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 13) & ((1ULL << 11) - 1);
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0 |= ((register_0) & ((1ULL << 3) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 3) & ((1ULL << 11) - 1);
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 11) - 1);
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 25) & ((1ULL << 7) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 7;
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 11) - 1);
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 15) & ((1ULL << 11) - 1);
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0 |= ((register_0) & ((1ULL << 5) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 5) & ((1ULL << 11) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 11) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 27) & ((1ULL << 5) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 5;
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 11) - 1);
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 17) & ((1ULL << 11) - 1);
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0 |= ((register_0) & ((1ULL << 7) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 7) & ((1ULL << 11) - 1);
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 11) - 1);
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 29) & ((1ULL << 3) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 3;
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 11) - 1);
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 19) & ((1ULL << 11) - 1);
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	tmp_0 |= ((register_0) & ((1ULL << 9) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 9) & ((1ULL << 11) - 1);
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 11) - 1);
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 31) & ((1ULL << 1) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 320);
	tmp_0 |= ((register_0) & ((1ULL << 10) - 1)) << 1;
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 11) - 1);
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 21) & ((1ULL << 11) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_12bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                   = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                        = (register_0) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 0]  = tmp_0;
	tmp_0                        = (register_0 >> 12) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 64]  = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 96]  = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0                         = (register_0) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0                         = (register_0) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	tmp_0                         = (register_0) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 320);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 352);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_13bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                   = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                        = (register_0) & ((1ULL << 13) - 1);
	out[(i * 1) + (0 * 32) + 0]  = tmp_0;
	tmp_0                        = (register_0 >> 13) & ((1ULL << 13) - 1);
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 7) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 64] = tmp_0;
	tmp_0                        = (register_0 >> 7) & ((1ULL << 13) - 1);
	out[(i * 1) + (0 * 32) + 96] = tmp_0;
	tmp_0                        = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 1) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 1) & ((1ULL << 13) - 1);
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 13) - 1);
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 27) & ((1ULL << 5) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 5;
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 13) - 1);
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 21) & ((1ULL << 11) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 11;
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 13) - 1);
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 15) & ((1ULL << 13) - 1);
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0 |= ((register_0) & ((1ULL << 9) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 9) & ((1ULL << 13) - 1);
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 10) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0 |= ((register_0) & ((1ULL << 3) - 1)) << 10;
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 3) & ((1ULL << 13) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 13) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 29) & ((1ULL << 3) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0 |= ((register_0) & ((1ULL << 10) - 1)) << 3;
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 13) - 1);
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 23) & ((1ULL << 9) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 9;
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 13) - 1);
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 17) & ((1ULL << 13) - 1);
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	tmp_0 |= ((register_0) & ((1ULL << 11) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 11) & ((1ULL << 13) - 1);
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 320);
	tmp_0 |= ((register_0) & ((1ULL << 5) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 5) & ((1ULL << 13) - 1);
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 13) - 1);
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 31) & ((1ULL << 1) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 352);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 1;
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 13) - 1);
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 25) & ((1ULL << 7) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 384);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 7;
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 13) - 1);
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 19) & ((1ULL << 13) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_14bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                   = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                        = (register_0) & ((1ULL << 14) - 1);
	out[(i * 1) + (0 * 32) + 0]  = tmp_0;
	tmp_0                        = (register_0 >> 14) & ((1ULL << 14) - 1);
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 10) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 64] = tmp_0;
	tmp_0                        = (register_0 >> 10) & ((1ULL << 14) - 1);
	out[(i * 1) + (0 * 32) + 96] = tmp_0;
	tmp_0                        = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 14) - 1);
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 14) - 1);
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 14) - 1);
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 14) - 1);
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 14) - 1);
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 10) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 10;
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 14) - 1);
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 14) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0                         = (register_0) & ((1ULL << 14) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 14) - 1);
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0 |= ((register_0) & ((1ULL << 10) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 14) - 1);
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 14) - 1);
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 320);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 14) - 1);
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 14) - 1);
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 352);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 14) - 1);
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 384);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 14) - 1);
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 10) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 416);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 10;
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 14) - 1);
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 14) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_15bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                   = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                        = (register_0) & ((1ULL << 15) - 1);
	out[(i * 1) + (0 * 32) + 0]  = tmp_0;
	tmp_0                        = (register_0 >> 15) & ((1ULL << 15) - 1);
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 13) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 64] = tmp_0;
	tmp_0                        = (register_0 >> 13) & ((1ULL << 15) - 1);
	out[(i * 1) + (0 * 32) + 96] = tmp_0;
	tmp_0                        = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 11) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 11) & ((1ULL << 15) - 1);
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0 |= ((register_0) & ((1ULL << 9) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 9) & ((1ULL << 15) - 1);
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 7) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 7) & ((1ULL << 15) - 1);
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 10) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0 |= ((register_0) & ((1ULL << 5) - 1)) << 10;
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 5) & ((1ULL << 15) - 1);
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0 |= ((register_0) & ((1ULL << 3) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 3) & ((1ULL << 15) - 1);
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 14) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0 |= ((register_0) & ((1ULL << 1) - 1)) << 14;
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 1) & ((1ULL << 15) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 15) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 31) & ((1ULL << 1) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0 |= ((register_0) & ((1ULL << 14) - 1)) << 1;
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 15) - 1);
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 29) & ((1ULL << 3) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 3;
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 15) - 1);
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 27) & ((1ULL << 5) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 320);
	tmp_0 |= ((register_0) & ((1ULL << 10) - 1)) << 5;
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 15) - 1);
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 25) & ((1ULL << 7) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 352);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 7;
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 15) - 1);
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 23) & ((1ULL << 9) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 384);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 9;
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 15) - 1);
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 21) & ((1ULL << 11) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 416);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 11;
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 15) - 1);
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 19) & ((1ULL << 13) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 448);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 13;
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 15) - 1);
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 17) & ((1ULL << 15) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_16bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                    = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                         = (register_0) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 0]   = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 32]  = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0                         = (register_0) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 64]  = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 96]  = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0                         = (register_0) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0                         = (register_0) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0                         = (register_0) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0                         = (register_0) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0                         = (register_0) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0                         = (register_0) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0                         = (register_0) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	tmp_0                         = (register_0) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 320);
	tmp_0                         = (register_0) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 352);
	tmp_0                         = (register_0) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 384);
	tmp_0                         = (register_0) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 416);
	tmp_0                         = (register_0) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 448);
	tmp_0                         = (register_0) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 480);
	tmp_0                         = (register_0) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_17bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                  = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                       = (register_0) & ((1ULL << 17) - 1);
	out[(i * 1) + (0 * 32) + 0] = tmp_0;
	tmp_0                       = (register_0 >> 17) & ((1ULL << 15) - 1);
	register_0                  = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 15;
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 2) & ((1ULL << 17) - 1);
	out[(i * 1) + (0 * 32) + 64] = tmp_0;
	tmp_0                        = (register_0 >> 19) & ((1ULL << 13) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 13;
	out[(i * 1) + (0 * 32) + 96]  = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 17) - 1);
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 21) & ((1ULL << 11) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 11;
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 17) - 1);
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 23) & ((1ULL << 9) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 9;
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 17) - 1);
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 25) & ((1ULL << 7) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0 |= ((register_0) & ((1ULL << 10) - 1)) << 7;
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 17) - 1);
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 27) & ((1ULL << 5) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 5;
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 17) - 1);
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 29) & ((1ULL << 3) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0 |= ((register_0) & ((1ULL << 14) - 1)) << 3;
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 17) - 1);
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 31) & ((1ULL << 1) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 1;
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	tmp_0 |= ((register_0) & ((1ULL << 1) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 1) & ((1ULL << 17) - 1);
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 14) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 320);
	tmp_0 |= ((register_0) & ((1ULL << 3) - 1)) << 14;
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 3) & ((1ULL << 17) - 1);
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 352);
	tmp_0 |= ((register_0) & ((1ULL << 5) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 5) & ((1ULL << 17) - 1);
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 10) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 384);
	tmp_0 |= ((register_0) & ((1ULL << 7) - 1)) << 10;
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 7) & ((1ULL << 17) - 1);
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 416);
	tmp_0 |= ((register_0) & ((1ULL << 9) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 9) & ((1ULL << 17) - 1);
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 448);
	tmp_0 |= ((register_0) & ((1ULL << 11) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 11) & ((1ULL << 17) - 1);
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 480);
	tmp_0 |= ((register_0) & ((1ULL << 13) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 13) & ((1ULL << 17) - 1);
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 512);
	tmp_0 |= ((register_0) & ((1ULL << 15) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 15) & ((1ULL << 17) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_18bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                  = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                       = (register_0) & ((1ULL << 18) - 1);
	out[(i * 1) + (0 * 32) + 0] = tmp_0;
	tmp_0                       = (register_0 >> 18) & ((1ULL << 14) - 1);
	register_0                  = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 14;
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 4) & ((1ULL << 18) - 1);
	out[(i * 1) + (0 * 32) + 64] = tmp_0;
	tmp_0                        = (register_0 >> 22) & ((1ULL << 10) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 10;
	out[(i * 1) + (0 * 32) + 96]  = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 18) - 1);
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 18) - 1);
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 18) - 1);
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 18) - 1);
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0 |= ((register_0) & ((1ULL << 10) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 18) - 1);
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0 |= ((register_0) & ((1ULL << 14) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 18) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	tmp_0                         = (register_0) & ((1ULL << 18) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 14) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 320);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 14;
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 18) - 1);
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 10) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 352);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 10;
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 18) - 1);
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 384);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 18) - 1);
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 416);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 448);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 18) - 1);
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 480);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 18) - 1);
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 512);
	tmp_0 |= ((register_0) & ((1ULL << 10) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 18) - 1);
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 544);
	tmp_0 |= ((register_0) & ((1ULL << 14) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 18) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_19bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                  = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                       = (register_0) & ((1ULL << 19) - 1);
	out[(i * 1) + (0 * 32) + 0] = tmp_0;
	tmp_0                       = (register_0 >> 19) & ((1ULL << 13) - 1);
	register_0                  = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 13;
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 6) & ((1ULL << 19) - 1);
	out[(i * 1) + (0 * 32) + 64] = tmp_0;
	tmp_0                        = (register_0 >> 25) & ((1ULL << 7) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 7;
	out[(i * 1) + (0 * 32) + 96]  = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 19) - 1);
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 31) & ((1ULL << 1) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0 |= ((register_0) & ((1ULL << 18) - 1)) << 1;
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 14) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 5) - 1)) << 14;
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 5) & ((1ULL << 19) - 1);
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0 |= ((register_0) & ((1ULL << 11) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 11) & ((1ULL << 19) - 1);
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0 |= ((register_0) & ((1ULL << 17) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 17) & ((1ULL << 15) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 15;
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 19) - 1);
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 23) & ((1ULL << 9) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0 |= ((register_0) & ((1ULL << 10) - 1)) << 9;
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 19) - 1);
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 29) & ((1ULL << 3) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 3;
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 320);
	tmp_0 |= ((register_0) & ((1ULL << 3) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 3) & ((1ULL << 19) - 1);
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 10) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 352);
	tmp_0 |= ((register_0) & ((1ULL << 9) - 1)) << 10;
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 9) & ((1ULL << 19) - 1);
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 384);
	tmp_0 |= ((register_0) & ((1ULL << 15) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 15) & ((1ULL << 17) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 416);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 17;
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 19) - 1);
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 21) & ((1ULL << 11) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 448);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 11;
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 19) - 1);
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 27) & ((1ULL << 5) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 480);
	tmp_0 |= ((register_0) & ((1ULL << 14) - 1)) << 5;
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 18) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 512);
	tmp_0 |= ((register_0) & ((1ULL << 1) - 1)) << 18;
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 1) & ((1ULL << 19) - 1);
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 544);
	tmp_0 |= ((register_0) & ((1ULL << 7) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 7) & ((1ULL << 19) - 1);
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 576);
	tmp_0 |= ((register_0) & ((1ULL << 13) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 13) & ((1ULL << 19) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_20bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                  = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                       = (register_0) & ((1ULL << 20) - 1);
	out[(i * 1) + (0 * 32) + 0] = tmp_0;
	tmp_0                       = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                  = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 8) & ((1ULL << 20) - 1);
	out[(i * 1) + (0 * 32) + 64] = tmp_0;
	tmp_0                        = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 96] = tmp_0;
	tmp_0                        = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 20) - 1);
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 20) - 1);
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0                         = (register_0) & ((1ULL << 20) - 1);
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 20) - 1);
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 20) - 1);
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 20) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 320);
	tmp_0                         = (register_0) & ((1ULL << 20) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 352);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 20) - 1);
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 384);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 416);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 20) - 1);
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 448);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 20) - 1);
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 480);
	tmp_0                         = (register_0) & ((1ULL << 20) - 1);
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 512);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 20) - 1);
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 544);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 576);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 20) - 1);
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 608);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 20) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_21bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                  = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                       = (register_0) & ((1ULL << 21) - 1);
	out[(i * 1) + (0 * 32) + 0] = tmp_0;
	tmp_0                       = (register_0 >> 21) & ((1ULL << 11) - 1);
	register_0                  = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 10) - 1)) << 11;
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 10) & ((1ULL << 21) - 1);
	out[(i * 1) + (0 * 32) + 64] = tmp_0;
	tmp_0                        = (register_0 >> 31) & ((1ULL << 1) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 20) - 1)) << 1;
	out[(i * 1) + (0 * 32) + 96] = tmp_0;
	tmp_0                        = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0 |= ((register_0) & ((1ULL << 9) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 9) & ((1ULL << 21) - 1);
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 19) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 19) & ((1ULL << 13) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 13;
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 21) - 1);
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 29) & ((1ULL << 3) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0 |= ((register_0) & ((1ULL << 18) - 1)) << 3;
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 14) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0 |= ((register_0) & ((1ULL << 7) - 1)) << 14;
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 7) & ((1ULL << 21) - 1);
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0 |= ((register_0) & ((1ULL << 17) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 17) & ((1ULL << 15) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 15;
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 21) - 1);
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 27) & ((1ULL << 5) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 320);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 5;
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 352);
	tmp_0 |= ((register_0) & ((1ULL << 5) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 5) & ((1ULL << 21) - 1);
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 384);
	tmp_0 |= ((register_0) & ((1ULL << 15) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 15) & ((1ULL << 17) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 416);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 17;
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 21) - 1);
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 25) & ((1ULL << 7) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 448);
	tmp_0 |= ((register_0) & ((1ULL << 14) - 1)) << 7;
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 18) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 480);
	tmp_0 |= ((register_0) & ((1ULL << 3) - 1)) << 18;
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 3) & ((1ULL << 21) - 1);
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 512);
	tmp_0 |= ((register_0) & ((1ULL << 13) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 13) & ((1ULL << 19) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 544);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 19;
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 21) - 1);
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 23) & ((1ULL << 9) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 576);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 9;
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 20) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 608);
	tmp_0 |= ((register_0) & ((1ULL << 1) - 1)) << 20;
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 1) & ((1ULL << 21) - 1);
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 10) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 640);
	tmp_0 |= ((register_0) & ((1ULL << 11) - 1)) << 10;
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 11) & ((1ULL << 21) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_22bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                  = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                       = (register_0) & ((1ULL << 22) - 1);
	out[(i * 1) + (0 * 32) + 0] = tmp_0;
	tmp_0                       = (register_0 >> 22) & ((1ULL << 10) - 1);
	register_0                  = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 10;
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 12) & ((1ULL << 20) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 20;
	out[(i * 1) + (0 * 32) + 64] = tmp_0;
	tmp_0                        = (register_0 >> 2) & ((1ULL << 22) - 1);
	out[(i * 1) + (0 * 32) + 96] = tmp_0;
	tmp_0                        = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0 |= ((register_0) & ((1ULL << 14) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 18) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 18;
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 22) - 1);
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 22) - 1);
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0 |= ((register_0) & ((1ULL << 18) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 14) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 14;
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 22) - 1);
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	tmp_0 |= ((register_0) & ((1ULL << 20) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 320);
	tmp_0 |= ((register_0) & ((1ULL << 10) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 22) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 352);
	tmp_0                         = (register_0) & ((1ULL << 22) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 10) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 384);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 10;
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 20) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 416);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 20;
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 22) - 1);
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 448);
	tmp_0 |= ((register_0) & ((1ULL << 14) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 18) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 480);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 18;
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 22) - 1);
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 512);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 544);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 22) - 1);
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 576);
	tmp_0 |= ((register_0) & ((1ULL << 18) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 14) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 608);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 14;
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 22) - 1);
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 640);
	tmp_0 |= ((register_0) & ((1ULL << 20) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 672);
	tmp_0 |= ((register_0) & ((1ULL << 10) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 22) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_23bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                  = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                       = (register_0) & ((1ULL << 23) - 1);
	out[(i * 1) + (0 * 32) + 0] = tmp_0;
	tmp_0                       = (register_0 >> 23) & ((1ULL << 9) - 1);
	register_0                  = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 14) - 1)) << 9;
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 14) & ((1ULL << 18) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 5) - 1)) << 18;
	out[(i * 1) + (0 * 32) + 64] = tmp_0;
	tmp_0                        = (register_0 >> 5) & ((1ULL << 23) - 1);
	out[(i * 1) + (0 * 32) + 96] = tmp_0;
	tmp_0                        = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0 |= ((register_0) & ((1ULL << 19) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 19) & ((1ULL << 13) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 10) - 1)) << 13;
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 22) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0 |= ((register_0) & ((1ULL << 1) - 1)) << 22;
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 1) & ((1ULL << 23) - 1);
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0 |= ((register_0) & ((1ULL << 15) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 15) & ((1ULL << 17) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 17;
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 23) - 1);
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 29) & ((1ULL << 3) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0 |= ((register_0) & ((1ULL << 20) - 1)) << 3;
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	tmp_0 |= ((register_0) & ((1ULL << 11) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 11) & ((1ULL << 21) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 320);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 21;
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 23) - 1);
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 25) & ((1ULL << 7) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 352);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 7;
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 384);
	tmp_0 |= ((register_0) & ((1ULL << 7) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 7) & ((1ULL << 23) - 1);
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 416);
	tmp_0 |= ((register_0) & ((1ULL << 21) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 21) & ((1ULL << 11) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 448);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 11;
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 20) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 480);
	tmp_0 |= ((register_0) & ((1ULL << 3) - 1)) << 20;
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 3) & ((1ULL << 23) - 1);
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 512);
	tmp_0 |= ((register_0) & ((1ULL << 17) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 17) & ((1ULL << 15) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 544);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 15;
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 23) - 1);
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 31) & ((1ULL << 1) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 576);
	tmp_0 |= ((register_0) & ((1ULL << 22) - 1)) << 1;
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 10) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 608);
	tmp_0 |= ((register_0) & ((1ULL << 13) - 1)) << 10;
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 13) & ((1ULL << 19) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 640);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 19;
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 23) - 1);
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 27) & ((1ULL << 5) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 672);
	tmp_0 |= ((register_0) & ((1ULL << 18) - 1)) << 5;
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 14) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 704);
	tmp_0 |= ((register_0) & ((1ULL << 9) - 1)) << 14;
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 9) & ((1ULL << 23) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_24bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                  = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                       = (register_0) & ((1ULL << 24) - 1);
	out[(i * 1) + (0 * 32) + 0] = tmp_0;
	tmp_0                       = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                  = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 64]  = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 24) - 1);
	out[(i * 1) + (0 * 32) + 96]  = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0                         = (register_0) & ((1ULL << 24) - 1);
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 24) - 1);
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0                         = (register_0) & ((1ULL << 24) - 1);
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 24) - 1);
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	tmp_0                         = (register_0) & ((1ULL << 24) - 1);
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 320);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 352);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 24) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 384);
	tmp_0                         = (register_0) & ((1ULL << 24) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 416);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 448);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 24) - 1);
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 480);
	tmp_0                         = (register_0) & ((1ULL << 24) - 1);
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 512);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 544);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 24) - 1);
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 576);
	tmp_0                         = (register_0) & ((1ULL << 24) - 1);
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 608);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 640);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 24) - 1);
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 672);
	tmp_0                         = (register_0) & ((1ULL << 24) - 1);
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 704);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 736);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 24) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_25bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                  = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                       = (register_0) & ((1ULL << 25) - 1);
	out[(i * 1) + (0 * 32) + 0] = tmp_0;
	tmp_0                       = (register_0 >> 25) & ((1ULL << 7) - 1);
	register_0                  = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 18) - 1)) << 7;
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 18) & ((1ULL << 14) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 11) - 1)) << 14;
	out[(i * 1) + (0 * 32) + 64] = tmp_0;
	tmp_0                        = (register_0 >> 11) & ((1ULL << 21) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 21;
	out[(i * 1) + (0 * 32) + 96]  = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 25) - 1);
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 29) & ((1ULL << 3) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 22) - 1)) << 3;
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 10) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0 |= ((register_0) & ((1ULL << 15) - 1)) << 10;
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 15) & ((1ULL << 17) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 17;
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 24) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0 |= ((register_0) & ((1ULL << 1) - 1)) << 24;
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 1) & ((1ULL << 25) - 1);
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0 |= ((register_0) & ((1ULL << 19) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 19) & ((1ULL << 13) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 13;
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 20) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 320);
	tmp_0 |= ((register_0) & ((1ULL << 5) - 1)) << 20;
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 5) & ((1ULL << 25) - 1);
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 352);
	tmp_0 |= ((register_0) & ((1ULL << 23) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 23) & ((1ULL << 9) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 384);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 9;
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 416);
	tmp_0 |= ((register_0) & ((1ULL << 9) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 9) & ((1ULL << 23) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 448);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 23;
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 25) - 1);
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 27) & ((1ULL << 5) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 480);
	tmp_0 |= ((register_0) & ((1ULL << 20) - 1)) << 5;
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 512);
	tmp_0 |= ((register_0) & ((1ULL << 13) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 13) & ((1ULL << 19) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 544);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 19;
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 25) - 1);
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 31) & ((1ULL << 1) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 576);
	tmp_0 |= ((register_0) & ((1ULL << 24) - 1)) << 1;
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 608);
	tmp_0 |= ((register_0) & ((1ULL << 17) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 17) & ((1ULL << 15) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 640);
	tmp_0 |= ((register_0) & ((1ULL << 10) - 1)) << 15;
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 22) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 672);
	tmp_0 |= ((register_0) & ((1ULL << 3) - 1)) << 22;
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 3) & ((1ULL << 25) - 1);
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 704);
	tmp_0 |= ((register_0) & ((1ULL << 21) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 21) & ((1ULL << 11) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 736);
	tmp_0 |= ((register_0) & ((1ULL << 14) - 1)) << 11;
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 18) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 768);
	tmp_0 |= ((register_0) & ((1ULL << 7) - 1)) << 18;
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 7) & ((1ULL << 25) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_26bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                  = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                       = (register_0) & ((1ULL << 26) - 1);
	out[(i * 1) + (0 * 32) + 0] = tmp_0;
	tmp_0                       = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                  = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 20) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 14) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 64] = tmp_0;
	tmp_0                        = (register_0 >> 14) & ((1ULL << 18) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 18;
	out[(i * 1) + (0 * 32) + 96] = tmp_0;
	tmp_0                        = (register_0 >> 8) & ((1ULL << 24) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 24;
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 26) - 1);
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0 |= ((register_0) & ((1ULL << 22) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 10) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 10;
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0 |= ((register_0) & ((1ULL << 10) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 22) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 22;
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 26) - 1);
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	tmp_0 |= ((register_0) & ((1ULL << 24) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 320);
	tmp_0 |= ((register_0) & ((1ULL << 18) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 14) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 352);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 14;
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 20) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 384);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 20;
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 26) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 416);
	tmp_0                         = (register_0) & ((1ULL << 26) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 448);
	tmp_0 |= ((register_0) & ((1ULL << 20) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 480);
	tmp_0 |= ((register_0) & ((1ULL << 14) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 18) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 512);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 18;
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 24) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 544);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 24;
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 26) - 1);
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 576);
	tmp_0 |= ((register_0) & ((1ULL << 22) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 10) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 608);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 10;
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 640);
	tmp_0 |= ((register_0) & ((1ULL << 10) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 22) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 672);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 22;
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 26) - 1);
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 704);
	tmp_0 |= ((register_0) & ((1ULL << 24) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 736);
	tmp_0 |= ((register_0) & ((1ULL << 18) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 14) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 768);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 14;
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 20) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 800);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 20;
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 26) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_27bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                  = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                       = (register_0) & ((1ULL << 27) - 1);
	out[(i * 1) + (0 * 32) + 0] = tmp_0;
	tmp_0                       = (register_0 >> 27) & ((1ULL << 5) - 1);
	register_0                  = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 22) - 1)) << 5;
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 22) & ((1ULL << 10) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 17) - 1)) << 10;
	out[(i * 1) + (0 * 32) + 64] = tmp_0;
	tmp_0                        = (register_0 >> 17) & ((1ULL << 15) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 15;
	out[(i * 1) + (0 * 32) + 96] = tmp_0;
	tmp_0                        = (register_0 >> 12) & ((1ULL << 20) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 7) - 1)) << 20;
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 7) & ((1ULL << 25) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 25;
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 27) - 1);
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 29) & ((1ULL << 3) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0 |= ((register_0) & ((1ULL << 24) - 1)) << 3;
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0 |= ((register_0) & ((1ULL << 19) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 19) & ((1ULL << 13) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0 |= ((register_0) & ((1ULL << 14) - 1)) << 13;
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 18) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	tmp_0 |= ((register_0) & ((1ULL << 9) - 1)) << 18;
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 9) & ((1ULL << 23) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 320);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 23;
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 27) - 1);
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 31) & ((1ULL << 1) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 352);
	tmp_0 |= ((register_0) & ((1ULL << 26) - 1)) << 1;
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 384);
	tmp_0 |= ((register_0) & ((1ULL << 21) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 21) & ((1ULL << 11) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 416);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 11;
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 448);
	tmp_0 |= ((register_0) & ((1ULL << 11) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 11) & ((1ULL << 21) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 480);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 21;
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 26) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 512);
	tmp_0 |= ((register_0) & ((1ULL << 1) - 1)) << 26;
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 1) & ((1ULL << 27) - 1);
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 544);
	tmp_0 |= ((register_0) & ((1ULL << 23) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 23) & ((1ULL << 9) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 576);
	tmp_0 |= ((register_0) & ((1ULL << 18) - 1)) << 9;
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 14) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 608);
	tmp_0 |= ((register_0) & ((1ULL << 13) - 1)) << 14;
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 13) & ((1ULL << 19) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 640);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 19;
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 24) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 672);
	tmp_0 |= ((register_0) & ((1ULL << 3) - 1)) << 24;
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 3) & ((1ULL << 27) - 1);
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 704);
	tmp_0 |= ((register_0) & ((1ULL << 25) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 25) & ((1ULL << 7) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 736);
	tmp_0 |= ((register_0) & ((1ULL << 20) - 1)) << 7;
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 768);
	tmp_0 |= ((register_0) & ((1ULL << 15) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 15) & ((1ULL << 17) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 800);
	tmp_0 |= ((register_0) & ((1ULL << 10) - 1)) << 17;
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 22) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 832);
	tmp_0 |= ((register_0) & ((1ULL << 5) - 1)) << 22;
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 5) & ((1ULL << 27) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_28bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                  = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                       = (register_0) & ((1ULL << 28) - 1);
	out[(i * 1) + (0 * 32) + 0] = tmp_0;
	tmp_0                       = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                  = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 24) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 20) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 64] = tmp_0;
	tmp_0                        = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 96] = tmp_0;
	tmp_0                        = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 20) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 20;
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 24) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 24;
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 28) - 1);
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0                         = (register_0) & ((1ULL << 28) - 1);
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0 |= ((register_0) & ((1ULL << 24) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	tmp_0 |= ((register_0) & ((1ULL << 20) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 320);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 352);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 20) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 384);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 20;
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 24) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 416);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 24;
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 28) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 448);
	tmp_0                         = (register_0) & ((1ULL << 28) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 480);
	tmp_0 |= ((register_0) & ((1ULL << 24) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 512);
	tmp_0 |= ((register_0) & ((1ULL << 20) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 544);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 576);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 20) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 608);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 20;
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 24) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 640);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 24;
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 28) - 1);
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 672);
	tmp_0                         = (register_0) & ((1ULL << 28) - 1);
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 704);
	tmp_0 |= ((register_0) & ((1ULL << 24) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 736);
	tmp_0 |= ((register_0) & ((1ULL << 20) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 768);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 800);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 20) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 832);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 20;
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 24) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 864);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 24;
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 28) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_29bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                  = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                       = (register_0) & ((1ULL << 29) - 1);
	out[(i * 1) + (0 * 32) + 0] = tmp_0;
	tmp_0                       = (register_0 >> 29) & ((1ULL << 3) - 1);
	register_0                  = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 26) - 1)) << 3;
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 23) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 64] = tmp_0;
	tmp_0                        = (register_0 >> 23) & ((1ULL << 9) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0 |= ((register_0) & ((1ULL << 20) - 1)) << 9;
	out[(i * 1) + (0 * 32) + 96] = tmp_0;
	tmp_0                        = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 17) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 17) & ((1ULL << 15) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0 |= ((register_0) & ((1ULL << 14) - 1)) << 15;
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 18) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0 |= ((register_0) & ((1ULL << 11) - 1)) << 18;
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 11) & ((1ULL << 21) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 21;
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 24) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0 |= ((register_0) & ((1ULL << 5) - 1)) << 24;
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 5) & ((1ULL << 27) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 27;
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 29) - 1);
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 31) & ((1ULL << 1) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 320);
	tmp_0 |= ((register_0) & ((1ULL << 28) - 1)) << 1;
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 352);
	tmp_0 |= ((register_0) & ((1ULL << 25) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 25) & ((1ULL << 7) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 384);
	tmp_0 |= ((register_0) & ((1ULL << 22) - 1)) << 7;
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 10) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 416);
	tmp_0 |= ((register_0) & ((1ULL << 19) - 1)) << 10;
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 19) & ((1ULL << 13) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 448);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 13;
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 480);
	tmp_0 |= ((register_0) & ((1ULL << 13) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 13) & ((1ULL << 19) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 512);
	tmp_0 |= ((register_0) & ((1ULL << 10) - 1)) << 19;
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 22) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 544);
	tmp_0 |= ((register_0) & ((1ULL << 7) - 1)) << 22;
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 7) & ((1ULL << 25) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 576);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 25;
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 28) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 608);
	tmp_0 |= ((register_0) & ((1ULL << 1) - 1)) << 28;
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 1) & ((1ULL << 29) - 1);
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 640);
	tmp_0 |= ((register_0) & ((1ULL << 27) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 27) & ((1ULL << 5) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 672);
	tmp_0 |= ((register_0) & ((1ULL << 24) - 1)) << 5;
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 704);
	tmp_0 |= ((register_0) & ((1ULL << 21) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 21) & ((1ULL << 11) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 736);
	tmp_0 |= ((register_0) & ((1ULL << 18) - 1)) << 11;
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 14) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 768);
	tmp_0 |= ((register_0) & ((1ULL << 15) - 1)) << 14;
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 15) & ((1ULL << 17) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 800);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 17;
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 20) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 832);
	tmp_0 |= ((register_0) & ((1ULL << 9) - 1)) << 20;
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 9) & ((1ULL << 23) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 864);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 23;
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 26) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 896);
	tmp_0 |= ((register_0) & ((1ULL << 3) - 1)) << 26;
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 3) & ((1ULL << 29) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_30bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                  = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                       = (register_0) & ((1ULL << 30) - 1);
	out[(i * 1) + (0 * 32) + 0] = tmp_0;
	tmp_0                       = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                  = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 28) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 26) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 64] = tmp_0;
	tmp_0                        = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0 |= ((register_0) & ((1ULL << 24) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 96] = tmp_0;
	tmp_0                        = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 22) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 10) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0 |= ((register_0) & ((1ULL << 20) - 1)) << 10;
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0 |= ((register_0) & ((1ULL << 18) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 14) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 14;
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0 |= ((register_0) & ((1ULL << 14) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 18) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 18;
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 20) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 320);
	tmp_0 |= ((register_0) & ((1ULL << 10) - 1)) << 20;
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 22) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 352);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 22;
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 24) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 384);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 24;
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 26) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 416);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 26;
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 28) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 448);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 28;
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 30) - 1);
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 480);
	tmp_0                         = (register_0) & ((1ULL << 30) - 1);
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 512);
	tmp_0 |= ((register_0) & ((1ULL << 28) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 544);
	tmp_0 |= ((register_0) & ((1ULL << 26) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 576);
	tmp_0 |= ((register_0) & ((1ULL << 24) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 608);
	tmp_0 |= ((register_0) & ((1ULL << 22) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 10) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 640);
	tmp_0 |= ((register_0) & ((1ULL << 20) - 1)) << 10;
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 672);
	tmp_0 |= ((register_0) & ((1ULL << 18) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 14) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 704);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 14;
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 736);
	tmp_0 |= ((register_0) & ((1ULL << 14) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 18) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 768);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 18;
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 20) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 800);
	tmp_0 |= ((register_0) & ((1ULL << 10) - 1)) << 20;
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 22) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 832);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 22;
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 24) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 864);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 24;
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 26) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 896);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 26;
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 28) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 928);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 28;
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 30) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_31bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                  = *(in + (0 * 32) + (i * 1) + 0);
	tmp_0                       = (register_0) & ((1ULL << 31) - 1);
	out[(i * 1) + (0 * 32) + 0] = tmp_0;
	tmp_0                       = (register_0 >> 31) & ((1ULL << 1) - 1);
	register_0                  = *(in + (0 * 32) + (i * 1) + 32);
	tmp_0 |= ((register_0) & ((1ULL << 30) - 1)) << 1;
	out[(i * 1) + (0 * 32) + 32] = tmp_0;
	tmp_0                        = (register_0 >> 30) & ((1ULL << 2) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 64);
	tmp_0 |= ((register_0) & ((1ULL << 29) - 1)) << 2;
	out[(i * 1) + (0 * 32) + 64] = tmp_0;
	tmp_0                        = (register_0 >> 29) & ((1ULL << 3) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 96);
	tmp_0 |= ((register_0) & ((1ULL << 28) - 1)) << 3;
	out[(i * 1) + (0 * 32) + 96] = tmp_0;
	tmp_0                        = (register_0 >> 28) & ((1ULL << 4) - 1);
	register_0                   = *(in + (0 * 32) + (i * 1) + 128);
	tmp_0 |= ((register_0) & ((1ULL << 27) - 1)) << 4;
	out[(i * 1) + (0 * 32) + 128] = tmp_0;
	tmp_0                         = (register_0 >> 27) & ((1ULL << 5) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	tmp_0 |= ((register_0) & ((1ULL << 26) - 1)) << 5;
	out[(i * 1) + (0 * 32) + 160] = tmp_0;
	tmp_0                         = (register_0 >> 26) & ((1ULL << 6) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	tmp_0 |= ((register_0) & ((1ULL << 25) - 1)) << 6;
	out[(i * 1) + (0 * 32) + 192] = tmp_0;
	tmp_0                         = (register_0 >> 25) & ((1ULL << 7) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	tmp_0 |= ((register_0) & ((1ULL << 24) - 1)) << 7;
	out[(i * 1) + (0 * 32) + 224] = tmp_0;
	tmp_0                         = (register_0 >> 24) & ((1ULL << 8) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	tmp_0 |= ((register_0) & ((1ULL << 23) - 1)) << 8;
	out[(i * 1) + (0 * 32) + 256] = tmp_0;
	tmp_0                         = (register_0 >> 23) & ((1ULL << 9) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	tmp_0 |= ((register_0) & ((1ULL << 22) - 1)) << 9;
	out[(i * 1) + (0 * 32) + 288] = tmp_0;
	tmp_0                         = (register_0 >> 22) & ((1ULL << 10) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 320);
	tmp_0 |= ((register_0) & ((1ULL << 21) - 1)) << 10;
	out[(i * 1) + (0 * 32) + 320] = tmp_0;
	tmp_0                         = (register_0 >> 21) & ((1ULL << 11) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 352);
	tmp_0 |= ((register_0) & ((1ULL << 20) - 1)) << 11;
	out[(i * 1) + (0 * 32) + 352] = tmp_0;
	tmp_0                         = (register_0 >> 20) & ((1ULL << 12) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 384);
	tmp_0 |= ((register_0) & ((1ULL << 19) - 1)) << 12;
	out[(i * 1) + (0 * 32) + 384] = tmp_0;
	tmp_0                         = (register_0 >> 19) & ((1ULL << 13) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 416);
	tmp_0 |= ((register_0) & ((1ULL << 18) - 1)) << 13;
	out[(i * 1) + (0 * 32) + 416] = tmp_0;
	tmp_0                         = (register_0 >> 18) & ((1ULL << 14) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 448);
	tmp_0 |= ((register_0) & ((1ULL << 17) - 1)) << 14;
	out[(i * 1) + (0 * 32) + 448] = tmp_0;
	tmp_0                         = (register_0 >> 17) & ((1ULL << 15) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 480);
	tmp_0 |= ((register_0) & ((1ULL << 16) - 1)) << 15;
	out[(i * 1) + (0 * 32) + 480] = tmp_0;
	tmp_0                         = (register_0 >> 16) & ((1ULL << 16) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 512);
	tmp_0 |= ((register_0) & ((1ULL << 15) - 1)) << 16;
	out[(i * 1) + (0 * 32) + 512] = tmp_0;
	tmp_0                         = (register_0 >> 15) & ((1ULL << 17) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 544);
	tmp_0 |= ((register_0) & ((1ULL << 14) - 1)) << 17;
	out[(i * 1) + (0 * 32) + 544] = tmp_0;
	tmp_0                         = (register_0 >> 14) & ((1ULL << 18) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 576);
	tmp_0 |= ((register_0) & ((1ULL << 13) - 1)) << 18;
	out[(i * 1) + (0 * 32) + 576] = tmp_0;
	tmp_0                         = (register_0 >> 13) & ((1ULL << 19) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 608);
	tmp_0 |= ((register_0) & ((1ULL << 12) - 1)) << 19;
	out[(i * 1) + (0 * 32) + 608] = tmp_0;
	tmp_0                         = (register_0 >> 12) & ((1ULL << 20) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 640);
	tmp_0 |= ((register_0) & ((1ULL << 11) - 1)) << 20;
	out[(i * 1) + (0 * 32) + 640] = tmp_0;
	tmp_0                         = (register_0 >> 11) & ((1ULL << 21) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 672);
	tmp_0 |= ((register_0) & ((1ULL << 10) - 1)) << 21;
	out[(i * 1) + (0 * 32) + 672] = tmp_0;
	tmp_0                         = (register_0 >> 10) & ((1ULL << 22) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 704);
	tmp_0 |= ((register_0) & ((1ULL << 9) - 1)) << 22;
	out[(i * 1) + (0 * 32) + 704] = tmp_0;
	tmp_0                         = (register_0 >> 9) & ((1ULL << 23) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 736);
	tmp_0 |= ((register_0) & ((1ULL << 8) - 1)) << 23;
	out[(i * 1) + (0 * 32) + 736] = tmp_0;
	tmp_0                         = (register_0 >> 8) & ((1ULL << 24) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 768);
	tmp_0 |= ((register_0) & ((1ULL << 7) - 1)) << 24;
	out[(i * 1) + (0 * 32) + 768] = tmp_0;
	tmp_0                         = (register_0 >> 7) & ((1ULL << 25) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 800);
	tmp_0 |= ((register_0) & ((1ULL << 6) - 1)) << 25;
	out[(i * 1) + (0 * 32) + 800] = tmp_0;
	tmp_0                         = (register_0 >> 6) & ((1ULL << 26) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 832);
	tmp_0 |= ((register_0) & ((1ULL << 5) - 1)) << 26;
	out[(i * 1) + (0 * 32) + 832] = tmp_0;
	tmp_0                         = (register_0 >> 5) & ((1ULL << 27) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 864);
	tmp_0 |= ((register_0) & ((1ULL << 4) - 1)) << 27;
	out[(i * 1) + (0 * 32) + 864] = tmp_0;
	tmp_0                         = (register_0 >> 4) & ((1ULL << 28) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 896);
	tmp_0 |= ((register_0) & ((1ULL << 3) - 1)) << 28;
	out[(i * 1) + (0 * 32) + 896] = tmp_0;
	tmp_0                         = (register_0 >> 3) & ((1ULL << 29) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 928);
	tmp_0 |= ((register_0) & ((1ULL << 2) - 1)) << 29;
	out[(i * 1) + (0 * 32) + 928] = tmp_0;
	tmp_0                         = (register_0 >> 2) & ((1ULL << 30) - 1);
	register_0                    = *(in + (0 * 32) + (i * 1) + 960);
	tmp_0 |= ((register_0) & ((1ULL << 1) - 1)) << 30;
	out[(i * 1) + (0 * 32) + 960] = tmp_0;
	tmp_0                         = (register_0 >> 1) & ((1ULL << 31) - 1);
	out[(i * 1) + (0 * 32) + 992] = tmp_0;
}
inline __device__ void unpack_32bw_32ow_32crw_1uf(const uint32_t* __restrict a_in_p, uint32_t* __restrict a_out_p) {
	[[maybe_unused]] auto     out = reinterpret_cast<uint32_t*>(a_out_p);
	[[maybe_unused]] auto     in  = reinterpret_cast<const uint32_t*>(a_in_p);
	[[maybe_unused]] uint32_t register_0;
	[[maybe_unused]] uint32_t tmp_0;
	[[maybe_unused]] uint32_t base_0 = 0ULL;

	int i = threadIdx.x; // THREAD INDEX

	register_0                    = *(in + (0 * 32) + (i * 1) + 0);
	out[(i * 1) + (0 * 32) + 0]   = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 32);
	out[(i * 1) + (0 * 32) + 32]  = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 64);
	out[(i * 1) + (0 * 32) + 64]  = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 96);
	out[(i * 1) + (0 * 32) + 96]  = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 128);
	out[(i * 1) + (0 * 32) + 128] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 160);
	out[(i * 1) + (0 * 32) + 160] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 192);
	out[(i * 1) + (0 * 32) + 192] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 224);
	out[(i * 1) + (0 * 32) + 224] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 256);
	out[(i * 1) + (0 * 32) + 256] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 288);
	out[(i * 1) + (0 * 32) + 288] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 320);
	out[(i * 1) + (0 * 32) + 320] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 352);
	out[(i * 1) + (0 * 32) + 352] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 384);
	out[(i * 1) + (0 * 32) + 384] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 416);
	out[(i * 1) + (0 * 32) + 416] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 448);
	out[(i * 1) + (0 * 32) + 448] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 480);
	out[(i * 1) + (0 * 32) + 480] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 512);
	out[(i * 1) + (0 * 32) + 512] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 544);
	out[(i * 1) + (0 * 32) + 544] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 576);
	out[(i * 1) + (0 * 32) + 576] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 608);
	out[(i * 1) + (0 * 32) + 608] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 640);
	out[(i * 1) + (0 * 32) + 640] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 672);
	out[(i * 1) + (0 * 32) + 672] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 704);
	out[(i * 1) + (0 * 32) + 704] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 736);
	out[(i * 1) + (0 * 32) + 736] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 768);
	out[(i * 1) + (0 * 32) + 768] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 800);
	out[(i * 1) + (0 * 32) + 800] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 832);
	out[(i * 1) + (0 * 32) + 832] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 864);
	out[(i * 1) + (0 * 32) + 864] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 896);
	out[(i * 1) + (0 * 32) + 896] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 928);
	out[(i * 1) + (0 * 32) + 928] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 960);
	out[(i * 1) + (0 * 32) + 960] = register_0;
	register_0                    = *(in + (0 * 32) + (i * 1) + 992);
	out[(i * 1) + (0 * 32) + 992] = register_0;
}
inline __device__ void unpack(const uint32_t* a_in_p, uint32_t* a_out_p, uint8_t bw) {
	switch (bw) {
	case 0:
		unpack_0bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 1:
		unpack_1bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 2:
		unpack_2bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 3:
		unpack_3bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 4:
		unpack_4bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 5:
		unpack_5bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 6:
		unpack_6bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 7:
		unpack_7bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 8:
		unpack_8bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 9:
		unpack_9bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 10:
		unpack_10bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 11:
		unpack_11bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 12:
		unpack_12bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 13:
		unpack_13bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 14:
		unpack_14bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 15:
		unpack_15bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 16:
		unpack_16bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 17:
		unpack_17bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 18:
		unpack_18bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 19:
		unpack_19bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 20:
		unpack_20bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 21:
		unpack_21bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 22:
		unpack_22bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 23:
		unpack_23bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 24:
		unpack_24bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 25:
		unpack_25bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 26:
		unpack_26bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 27:
		unpack_27bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 28:
		unpack_28bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 29:
		unpack_29bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 30:
		unpack_30bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 31:
		unpack_31bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	case 32:
		unpack_32bw_32ow_32crw_1uf(a_in_p, a_out_p);
		break;
	}
}

}}}; // namespace generated::unpack::cuda::normal

__global__ void unpack_global(const uint32_t* __restrict in, uint32_t* __restrict out, uint8_t bw) {
	int blc_idx = blockIdx.x;
	in          = in + ((blc_idx * bw) << 5);
	out         = out + (blc_idx << 10);

	generated::unpack::cuda::normal::unpack(in, out, bw);
}

__device__ __forceinline__ void unpack_device(const uint32_t* __restrict in, uint32_t* __restrict out, uint8_t bw) {
	generated::unpack::cuda::normal::unpack(in, out, bw);
}

__device__ __forceinline__ void unpack_device(const int32_t* __restrict in, int32_t* __restrict out, uint8_t bw) {
	generated::unpack::cuda::normal::unpack(
	    reinterpret_cast<const uint32_t*>(in), reinterpret_cast<uint32_t*>(out), bw);
}
